#!/usr/bin/env python3
"""
Utility functions for working with point cloud files generated by the depth estimator.
"""

import numpy as np
import os


def load_ply(filename):
    """
    Load 3D points from PLY file.
    
    Args:
        filename: Path to PLY file
        
    Returns:
        points_3d: Array of shape (N, 3) with 3D points
        colors: Array of shape (N, 3) with RGB colors (if available), None otherwise
    """
    points = []
    colors = []
    has_colors = False
    
    with open(filename, 'r') as f:
        # Read header
        line = f.readline().strip()
        if line != "ply":
            raise ValueError("Not a valid PLY file")
        
        num_vertices = 0
        while True:
            line = f.readline().strip()
            if line == "end_header":
                break
            
            if line.startswith("element vertex"):
                num_vertices = int(line.split()[-1])
            elif line.startswith("property uchar red"):
                has_colors = True
        
        # Read points
        for i in range(num_vertices):
            values = f.readline().strip().split()
            x, y, z = float(values[0]), float(values[1]), float(values[2])
            points.append([x, y, z])
            
            if has_colors and len(values) >= 6:
                r, g, b = int(values[3]), int(values[4]), int(values[5])
                colors.append([r, g, b])
    
    points_3d = np.array(points)
    colors_array = np.array(colors) if has_colors else None
    
    return points_3d, colors_array


def load_xyz(filename):
    """
    Load 3D points from XYZ file.
    
    Args:
        filename: Path to XYZ file
        
    Returns:
        points_3d: Array of shape (N, 3) with 3D points
    """
    points = []
    
    with open(filename, 'r') as f:
        for line in f:
            values = line.strip().split()
            if len(values) >= 3:
                x, y, z = float(values[0]), float(values[1]), float(values[2])
                points.append([x, y, z])
    
    return np.array(points)


def load_npz_with_metadata(filename):
    """
    Load 3D points and metadata from NPZ file.
    
    Args:
        filename: Path to NPZ file
        
    Returns:
        dict: Dictionary containing 'points_3d', 'confidence_scores', 'matched_pairs', 'metadata'
    """
    data = np.load(filename, allow_pickle=True)
    
    result = {
        'points_3d': data['points_3d'],
        'confidence_scores': data['confidence_scores'],
        'matched_pairs': data['matched_pairs']
    }
    
    # Handle metadata (might be stored as object array)
    if 'metadata' in data:
        metadata = data['metadata']
        if metadata.dtype == np.dtype('O'):
            metadata = metadata.item()
        result['metadata'] = metadata
    
    return result


def get_point_cloud_info(points_3d, confidence_scores=None):
    """
    Get information about a point cloud.
    
    Args:
        points_3d: Array of shape (N, 3) with 3D points
        confidence_scores: Optional array of confidence scores
        
    Returns:
        dict: Dictionary with point cloud statistics
    """
    info = {
        'num_points': len(points_3d),
        'x_range': [points_3d[:, 0].min(), points_3d[:, 0].max()],
        'y_range': [points_3d[:, 1].min(), points_3d[:, 1].max()],
        'z_range': [points_3d[:, 2].min(), points_3d[:, 2].max()],
        'mean_depth': points_3d[:, 2].mean(),
        'std_depth': points_3d[:, 2].std(),
        'centroid': points_3d.mean(axis=0)
    }
    
    if confidence_scores is not None:
        info['mean_confidence'] = confidence_scores.mean()
        info['min_confidence'] = confidence_scores.min()
        info['max_confidence'] = confidence_scores.max()
    
    return info


def filter_point_cloud(points_3d, confidence_scores=None, 
                      min_depth=None, max_depth=None,
                      min_confidence=None, max_confidence=None):
    """
    Filter point cloud based on various criteria.
    
    Args:
        points_3d: Array of shape (N, 3) with 3D points
        confidence_scores: Optional array of confidence scores
        min_depth: Minimum depth (Z coordinate)
        max_depth: Maximum depth (Z coordinate)
        min_confidence: Minimum confidence score
        max_confidence: Maximum confidence score
        
    Returns:
        tuple: (filtered_points, filtered_confidence, mask)
    """
    mask = np.ones(len(points_3d), dtype=bool)
    
    # Filter by depth
    if min_depth is not None:
        mask &= (points_3d[:, 2] >= min_depth)
    if max_depth is not None:
        mask &= (points_3d[:, 2] <= max_depth)
    
    # Filter by confidence
    if confidence_scores is not None:
        if min_confidence is not None:
            mask &= (confidence_scores >= min_confidence)
        if max_confidence is not None:
            mask &= (confidence_scores <= max_confidence)
    
    filtered_points = points_3d[mask]
    filtered_confidence = confidence_scores[mask] if confidence_scores is not None else None
    
    return filtered_points, filtered_confidence, mask


def print_point_cloud_summary(filename):
    """
    Print a summary of a point cloud file.
    
    Args:
        filename: Path to point cloud file
    """
    print(f"Point cloud file: {filename}")
    
    if filename.endswith('.ply'):
        points_3d, colors = load_ply(filename)
        print(f"  Format: PLY")
        if colors is not None:
            print(f"  Has colors: Yes")
    elif filename.endswith('.xyz'):
        points_3d = load_xyz(filename)
        print(f"  Format: XYZ")
    elif filename.endswith('.npz'):
        data = load_npz_with_metadata(filename)
        points_3d = data['points_3d']
        confidence_scores = data['confidence_scores']
        metadata = data.get('metadata', {})
        print(f"  Format: NPZ with metadata")
        print(f"  Metadata: {metadata}")
    else:
        print(f"  Unknown format")
        return
    
    info = get_point_cloud_info(points_3d, 
                               confidence_scores if 'confidence_scores' in locals() else None)
    
    print(f"  Number of points: {info['num_points']}")
    print(f"  X range: [{info['x_range'][0]:.3f}, {info['x_range'][1]:.3f}]")
    print(f"  Y range: [{info['y_range'][0]:.3f}, {info['y_range'][1]:.3f}]")
    print(f"  Z range: [{info['z_range'][0]:.3f}, {info['z_range'][1]:.3f}]")
    print(f"  Mean depth: {info['mean_depth']:.3f}")
    print(f"  Centroid: ({info['centroid'][0]:.3f}, {info['centroid'][1]:.3f}, {info['centroid'][2]:.3f})")
    
    if 'mean_confidence' in info:
        print(f"  Mean confidence: {info['mean_confidence']:.3f}")


if __name__ == "__main__":
    # Example usage
    import glob
    
    # Print summary of all point cloud files in current directory
    for filename in glob.glob("pointcloud_*.ply") + glob.glob("pointcloud_*.xyz") + glob.glob("pointcloud_*.npz"):
        print_point_cloud_summary(filename)
        print()


